<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sky.mapper.SectorDealDataMapper">
    <resultMap id="BaseResultMap" type="com.sky.model.SectorDealData">
        <id column="id" property="id"/>
        <result column="version" property="version"/>
        <result column="isvalid" property="isvalid"/>
        <result column="create_time" property="createTime"/>
        <result column="create_user" property="createUser"/>
        <result column="update_time" property="updateTime"/>
        <result column="update_user" property="updateUser"/>

        <result column="deal_period" property="dealPeriod"/>
        <result column="deal_time" property="dealTime"/>
        <result column="sector_code" property="sectorCode"/>
        <result column="open_price" property="openPrice"/>
        <result column="close_price" property="closePrice"/>
        <result column="high_price" property="highPrice"/>
        <result column="low_price" property="lowPrice"/>
        <result column="deal_count" property="dealCount"/>
        <result column="deal_money" property="dealMoney"/>
        <result column="amplitude" property="amplitude"/>
        <result column="hand_rate" property="handRate"/>
    </resultMap>

    <select id="getSectorDealCovarList" parameterType="java.lang.String" resultType="com.sky.vo.CovarDeal_VO">
        SELECT
        s.deal_time dealTime ,
        CASE WHEN s.close_price - s.open_price > 0 THEN 1 ELSE -1 END isUpper,
        s.close_price - s.open_price upperPrice ,
        s.high_price - s.low_price sockPrice
        FROM sector_deal_data s
        WHERE s.isvalid = 1
        AND s.sector_code = #{sectorCode}
        <if test="dealPeriod != null and dealPeriod != '' and dealPeriod != 'undefined'">
            AND s.deal_period = #{dealPeriod}
        </if>
        <if test="startDay != null and startDay != '' and startDay != 'undefined'">
            AND s.deal_time >= #{startDay}
        </if>
        <if test="endDay != null and endDay != '' and endDay != 'undefined'">
            AND s.deal_time &lt; #{endDay}
        </if>
    </select>


    <select id="getSectorMonthRateStaticList" parameterType="java.lang.String" resultType="com.sky.vo.IndexStatic_VO">
        SELECT
        SUBSTR(deal_time ,6,2) pointTime,
        SUM(CASE WHEN close_price - open_price > 0 THEN 1 ELSE 0 END) AS increaseNum ,
        SUM(CASE WHEN close_price - open_price &lt; 0 THEN 1 ELSE 0 END) AS decreaseNum ,
        SUM(CASE WHEN close_price - open_price > 0 THEN 1 ELSE 0 END) +
        SUM(CASE WHEN close_price - open_price &lt; 0 THEN 1 ELSE 0 END) AS totalNum ,
        ROUND(SUM(CASE WHEN close_price - open_price > 0 THEN 1 ELSE 0 END) / (
        SUM(CASE WHEN close_price - open_price > 0 THEN 1 ELSE 0 END) +
        SUM(CASE WHEN close_price - open_price &lt; 0 THEN 1 ELSE 0 END)
        ) * 100 ,2) AS increaseRate ,
        ROUND(SUM(CASE WHEN close_price - open_price &lt; 0 THEN 1 ELSE 0 END) / (
        SUM(CASE WHEN close_price - open_price > 0 THEN 1 ELSE 0 END) +
        SUM(CASE WHEN close_price - open_price &lt; 0 THEN 1 ELSE 0 END)
        ) * 100 ,2) AS decreaseRate
        FROM sector_deal_data
        WHERE isvalid = 1
        <if test="sectorCode != null and sectorCode != '' and sectorCode != 'undefined'">
            AND sector_code = #{sectorCode}
        </if>
        <if test="dealPeriod != null and dealPeriod != '' and dealPeriod != 'undefined'">
            AND deal_period = #{dealPeriod}
        </if>
        <if test="startDay != null and startDay != '' and startDay != 'undefined'">
            AND deal_time >= #{startDay}
        </if>
        <if test="endDay != null and endDay != '' and endDay != 'undefined'">
            AND deal_time &lt; #{endDay}
        </if>
        GROUP BY SUBSTR(deal_time ,6,2)
    </select>

    <select id="getSectorMonthValueStaticList" parameterType="java.lang.String" resultType="com.sky.vo.IndexStatic_VO">
        SELECT
        SUBSTR(deal_time ,6,2) pointTime,
        SUM(close_price - open_price) changeRange,
        SUM(high_price - low_price) shockRange ,
        ROUND(SUM(close_price - open_price) / SUM(1),2) changeAverage,
        ROUND(SUM(high_price - low_price) / SUM(1),2) shockAverage ,
        ROUND(SUM(open_price) / SUM(1),2) openAveragePrice,
        ROUND(SUM(close_price) / SUM(1),2) closeAveragePrice,
        ROUND(SUM(high_price) / SUM(1),2) highAveragePrice,
        ROUND(SUM(low_price) / SUM(1),2) lowAveragePrice
        FROM sector_deal_data
        WHERE isvalid = 1
        <if test="sectorCode != null and sectorCode != '' and sectorCode != 'undefined'">
            AND sector_code = #{sectorCode}
        </if>
        <if test="dealPeriod != null and dealPeriod != '' and dealPeriod != 'undefined'">
            AND deal_period = #{dealPeriod}
        </if>
        <if test="startDay != null and startDay != '' and startDay != 'undefined'">
            AND deal_time >= #{startDay}
        </if>
        <if test="endDay != null and endDay != '' and endDay != 'undefined'">
            AND deal_time &lt; #{endDay}
        </if>
        GROUP BY SUBSTR(deal_time ,6,2)
    </select>

    <select id="getSectorWeekRateStaticList" parameterType="java.lang.String" resultType="com.sky.vo.IndexStatic_VO">
        SELECT
        ((DAY(deal_time)+WEEKDAY(deal_time-INTERVAL DAY(deal_time) DAY)) DIV 7 + 1) pointTime,
        SUM(CASE WHEN close_price - open_price > 0 THEN 1 ELSE 0 END) AS increaseNum ,
        SUM(CASE WHEN close_price - open_price &lt; 0 THEN 1 ELSE 0 END) AS decreaseNum ,
        SUM(CASE WHEN close_price - open_price > 0 THEN 1 ELSE 0 END) +
        SUM(CASE WHEN close_price - open_price &lt; 0 THEN 1 ELSE 0 END) AS totalNum ,
        ROUND(SUM(CASE WHEN close_price - open_price > 0 THEN 1 ELSE 0 END) / (
        SUM(CASE WHEN close_price - open_price > 0 THEN 1 ELSE 0 END) +
        SUM(CASE WHEN close_price - open_price &lt; 0 THEN 1 ELSE 0 END)
        ) * 100 ,2) AS increaseRate ,
        ROUND(SUM(CASE WHEN close_price - open_price &lt; 0 THEN 1 ELSE 0 END) / (
        SUM(CASE WHEN close_price - open_price > 0 THEN 1 ELSE 0 END) +
        SUM(CASE WHEN close_price - open_price &lt; 0 THEN 1 ELSE 0 END)
        ) * 100 ,2) AS decreaseRate
        FROM sector_deal_data
        WHERE isvalid = 1
        AND deal_period = 2
        <if test="sectorCode != null and sectorCode != '' and sectorCode != 'undefined'">
            AND sector_code = #{sectorCode}
        </if>
        <if test="startDay != null and startDay != '' and startDay != 'undefined'">
            AND deal_time >= #{startDay}
        </if>
        <if test="endDay != null and endDay != '' and endDay != 'undefined'">
            AND deal_time &lt; #{endDay}
        </if>
        AND SUBSTR(deal_time ,6,2) = ${month}
        GROUP BY ((DAY(deal_time)+WEEKDAY(deal_time-INTERVAL DAY(deal_time) DAY)) DIV 7 + 1)
    </select>

    <select id="getSectorWeekValueStaticList" parameterType="java.lang.String" resultType="com.sky.vo.IndexStatic_VO">
        SELECT
        SUBSTR(deal_time ,6,2) pointTime,
        ((DAY(deal_time)+WEEKDAY(deal_time-INTERVAL DAY(deal_time) DAY)) DIV 7 + 1) weeks,
        SUM(close_price - open_price) changeRange,
        SUM(high_price - low_price) shockRange ,
        ROUND(SUM(close_price - open_price) / SUM(1),2) changeAverage,
        ROUND(SUM(high_price - low_price) / SUM(1),2) shockAverage
        FROM sector_deal_data
        WHERE isvalid = 1
        AND deal_period = 2
        <if test="sectorCode != null and sectorCode != '' and sectorCode != 'undefined'">
            AND sector_code = #{sectorCode}
        </if>
        <if test="startDay != null and startDay != '' and startDay != 'undefined'">
            AND deal_time >= #{startDay}
        </if>
        <if test="endDay != null and endDay != '' and endDay != 'undefined'">
            AND deal_time &lt; #{endDay}
        </if>
        AND SUBSTR(deal_time ,6,2) = ${month}
        GROUP BY ((DAY(deal_time)+WEEKDAY(deal_time-INTERVAL DAY(deal_time) DAY)) DIV 7 + 1)
    </select>

    <select id="getSectorDayRateStaticList" parameterType="java.lang.String" resultType="com.sky.vo.IndexStatic_VO">
        SELECT
        (DAYOFWEEK(deal_time) -1) pointTime,
        SUM(CASE WHEN close_price - open_price > 0 THEN 1 ELSE 0 END) AS increaseNum ,
        SUM(CASE WHEN close_price - open_price &lt; 0 THEN 1 ELSE 0 END) AS decreaseNum ,
        SUM(CASE WHEN close_price - open_price > 0 THEN 1 ELSE 0 END) +
        SUM(CASE WHEN close_price - open_price &lt; 0 THEN 1 ELSE 0 END) AS totalNum ,
        ROUND(SUM(CASE WHEN close_price - open_price > 0 THEN 1 ELSE 0 END) / (
        SUM(CASE WHEN close_price - open_price > 0 THEN 1 ELSE 0 END) +
        SUM(CASE WHEN close_price - open_price &lt; 0 THEN 1 ELSE 0 END)
        ) * 100 ,2) AS increaseRate ,
        ROUND(SUM(CASE WHEN close_price - open_price &lt; 0 THEN 1 ELSE 0 END) / (
        SUM(CASE WHEN close_price - open_price > 0 THEN 1 ELSE 0 END) +
        SUM(CASE WHEN close_price - open_price &lt; 0 THEN 1 ELSE 0 END)
        ) * 100 ,2) AS decreaseRate
        FROM sector_deal_data
        WHERE isvalid = 1
        AND deal_period = 1
        <if test="sectorCode != null and sectorCode != '' and sectorCode != 'undefined'">
            AND sector_code = #{sectorCode}
        </if>
        <if test="startDay != null and startDay != '' and startDay != 'undefined'">
            AND deal_time >= #{startDay}
        </if>
        <if test="endDay != null and endDay != '' and endDay != 'undefined'">
            AND deal_time &lt; #{endDay}
        </if>
        AND((DAY(deal_time)+WEEKDAY(deal_time-INTERVAL DAY(deal_time) DAY)) DIV 7 + 1) = ${week}
        GROUP BY (DAYOFWEEK(deal_time) -1)
    </select>

    <select id="getSectorDayValueStaticList" parameterType="java.lang.String" resultType="com.sky.vo.IndexStatic_VO">
        SELECT
        (DAYOFWEEK(deal_time) -1) pointTime,
        SUM(close_price - open_price) changeRange,
        SUM(high_price - low_price) shockRange ,
        ROUND(SUM(close_price - open_price) / SUM(1),2) changeAverage,
        ROUND(SUM(high_price - low_price) / SUM(1),2) shockAverage
        FROM sector_deal_data
        WHERE isvalid = 1
        AND deal_period = 1
        <if test="sectorCode != null and sectorCode != '' and sectorCode != 'undefined'">
            AND sector_code = #{sectorCode}
        </if>
        <if test="startDay != null and startDay != '' and startDay != 'undefined'">
            AND deal_time >= #{startDay}
        </if>
        <if test="endDay != null and endDay != '' and endDay != 'undefined'">
            AND deal_time &lt; #{endDay}
        </if>
        AND((DAY(deal_time)+WEEKDAY(deal_time-INTERVAL DAY(deal_time) DAY)) DIV 7 + 1) = ${week}
        GROUP BY (DAYOFWEEK(deal_time) -1)
    </select>

    <select id="getSectorOrderStaticList" parameterType="java.lang.String" resultType="com.sky.vo.SectorOrderStatic_VO">
        SELECT
        a.sectorCode ,
        a.sectorName ,
        ROUND(a.oneRise/(a.oneRise + a.oneDown)  * 100,2) oneRiseRate ,
        ROUND(a.oneDown/(a.oneRise + a.oneDown)  * 100,2) oneDownRate ,
        ROUND(a.towRise/(a.towRise + a.towDown)  * 100,2) towRiseRate ,
        ROUND(a.towDown/(a.towRise + a.towDown)  * 100,2) towDownRate ,
        ROUND(a.threeRise/(a.threeRise + a.threeDown)  * 100,2) threeRiseRate ,
        ROUND(a.threeDown/(a.threeRise + a.threeDown)  * 100,2) threeDownRate ,
        ROUND(a.fourRise/(a.fourRise + a.fourDown)  * 100,2) fourRiseRate ,
        ROUND(a.fourDown/(a.fourRise + a.fourDown)  * 100,2) fourDownRate ,
        ROUND(a.fiveRise/(a.fiveRise + a.fiveDown)  * 100,2) fiveRiseRate ,
        ROUND(a.fiveDown/(a.fiveRise + a.fiveDown)  * 100,2) fiveDownRate ,
        ROUND(a.sixRise/(a.sixRise + a.sixDown)  * 100,2) sixRiseRate ,
        ROUND(a.sixDown/(a.sixRise + a.sixDown)  * 100,2) sixDownRate ,
        ROUND(a.sevenRise/(a.sevenRise + a.sevenDown)  * 100,2) sevenRiseRate ,
        ROUND(a.sevenDown/(a.sevenRise + a.sevenDown)  * 100,2) sevenDownRate ,
        ROUND(a.eightRise/(a.eightRise + a.eightDown)  * 100,2) eightRiseRate ,
        ROUND(a.eightDown/(a.eightRise + a.eightDown)  * 100,2) eightDownRate ,
        ROUND(a.nineRise/(a.nineRise + a.nineDown)  * 100,2) nineRiseRate ,
        ROUND(a.nineDown/(a.nineRise + a.nineDown)  * 100,2) nineDownRate ,
        ROUND(a.tenRise/(a.tenRise + a.tenDown)  * 100,2) tenRiseRate ,
        ROUND(a.tenDown/(a.tenRise + a.tenDown)  * 100,2) tenDownRate ,
        ROUND(a.elevenRise/(a.elevenRise + a.elevenDown)  * 100,2) elevenRiseRate ,
        ROUND(a.elevenDown/(a.elevenRise + a.elevenDown)  * 100,2) elevenDownRate ,
        ROUND(a.twelveRise/(a.twelveRise + a.twelveDown)  * 100,2) twelveRiseRate ,
        ROUND(a.twelveDown/(a.twelveRise + a.twelveDown)  * 100,2) twelveDownRate ,

        ROUND(a.oneUpper/(a.oneRise + a.oneDown),2) oneUpperAverage ,
        ROUND(a.oneShock/(a.oneRise + a.oneDown),2) oneShockAverage ,
        ROUND(a.towUpper/(a.towRise + a.towDown),2) towUpperAverage ,
        ROUND(a.towShock/(a.towRise + a.towDown),2) towShockAverage ,
        ROUND(a.threeUpper/(a.threeRise + a.threeDown),2) threeUpperAverage ,
        ROUND(a.threeShock/(a.threeRise + a.threeDown),2) threeShockAverage ,
        ROUND(a.fourUpper/(a.fourRise + a.fourDown),2) fourUpperAverage ,
        ROUND(a.fourShock/(a.fourRise + a.fourDown),2) fourShockAverage ,
        ROUND(a.fiveUpper/(a.fiveRise + a.fiveDown),2) fiveUpperAverage ,
        ROUND(a.fiveShock/(a.fiveRise + a.fiveDown),2) fiveShockAverage ,
        ROUND(a.sixUpper/(a.sixRise + a.sixDown),2) sixUpperAverage ,
        ROUND(a.sixShock/(a.sixRise + a.sixDown),2) sixShockAverage ,
        ROUND(a.sevenUpper/(a.sevenRise + a.sevenDown),2) sevenUpperAverage ,
        ROUND(a.sevenShock/(a.sevenRise + a.sevenDown),2) sevenShockAverage ,
        ROUND(a.eightUpper/(a.eightRise + a.eightDown),2) eightUpperAverage ,
        ROUND(a.eightShock/(a.eightRise + a.eightDown),2) eightShockAverage ,
        ROUND(a.nineUpper/(a.nineRise + a.nineDown),2) nineUpperAverage ,
        ROUND(a.nineShock/(a.nineRise + a.nineDown),2) nineShockAverage ,
        ROUND(a.tenUpper/(a.tenRise + a.tenDown),2) tenUpperAverage ,
        ROUND(a.tenShock/(a.tenRise + a.tenDown),2) tenShockAverage ,
        ROUND(a.elvenUpper/(a.elevenRise + a.elevenDown),2) elvenUpperAverage ,
        ROUND(a.elvenShock/(a.elevenRise + a.elevenDown),2) elvenShockAverage ,
        ROUND(a.twelveUpper/(a.twelveRise + a.twelveDown),2) twelveUpperAverage ,
        ROUND(a.twelveShock/(a.twelveRise + a.twelveDown),2) twelveShockAverage
        FROM(
        SELECT
        s.sector_code sectorCode,
        c.class_name sectorName ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 1  THEN (CASE WHEN s.close_price - s.open_price > 0 THEN 1 ELSE 0 END) END) AS oneRise ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 1  THEN (CASE WHEN s.close_price - s.open_price &lt; 0 THEN 1 ELSE 0 END) END) AS oneDown ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 2  THEN (CASE WHEN s.close_price - s.open_price > 0 THEN 1 ELSE 0 END) END) AS towRise ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 2  THEN (CASE WHEN s.close_price - s.open_price &lt; 0 THEN 1 ELSE 0 END) END) AS towDown ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 3  THEN (CASE WHEN s.close_price - s.open_price > 0 THEN 1 ELSE 0 END) END) AS threeRise ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 3  THEN (CASE WHEN s.close_price - s.open_price &lt; 0 THEN 1 ELSE 0 END) END) AS threeDown ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 4  THEN (CASE WHEN s.close_price - s.open_price > 0 THEN 1 ELSE 0 END) END) AS fourRise ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 4  THEN (CASE WHEN s.close_price - s.open_price &lt; 0 THEN 1 ELSE 0 END) END) AS fourDown ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 5  THEN (CASE WHEN s.close_price - s.open_price > 0 THEN 1 ELSE 0 END) END) AS fiveRise ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 5  THEN (CASE WHEN s.close_price - s.open_price &lt; 0 THEN 1 ELSE 0 END) END) AS fiveDown ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 6  THEN (CASE WHEN s.close_price - s.open_price > 0 THEN 1 ELSE 0 END) END) AS sixRise ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 6  THEN (CASE WHEN s.close_price - s.open_price &lt; 0 THEN 1 ELSE 0 END) END) AS sixDown ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 7  THEN (CASE WHEN s.close_price - s.open_price > 0 THEN 1 ELSE 0 END) END) AS sevenRise ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 7  THEN (CASE WHEN s.close_price - s.open_price &lt; 0 THEN 1 ELSE 0 END) END) AS sevenDown ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 8  THEN (CASE WHEN s.close_price - s.open_price > 0 THEN 1 ELSE 0 END) END) AS eightRise ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 8  THEN (CASE WHEN s.close_price - s.open_price &lt; 0 THEN 1 ELSE 0 END) END) AS eightDown ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 9  THEN (CASE WHEN s.close_price - s.open_price > 0 THEN 1 ELSE 0 END) END) AS nineRise ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 9  THEN (CASE WHEN s.close_price - s.open_price &lt; 0 THEN 1 ELSE 0 END) END) AS nineDown ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 10 THEN (CASE WHEN s.close_price - s.open_price > 0 THEN 1 ELSE 0 END) END) AS tenRise ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 10 THEN (CASE WHEN s.close_price - s.open_price &lt; 0 THEN 1 ELSE 0 END) END) AS tenDown ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 11 THEN (CASE WHEN s.close_price - s.open_price > 0 THEN 1 ELSE 0 END) END) AS elevenRise ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 11 THEN (CASE WHEN s.close_price - s.open_price &lt; 0 THEN 1 ELSE 0 END) END) AS elevenDown ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 11 THEN (CASE WHEN s.close_price - s.open_price > 0 THEN 1 ELSE 0 END) END) AS twelveRise ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 11 THEN (CASE WHEN s.close_price - s.open_price &lt; 0 THEN 1 ELSE 0 END) END) AS twelveDown ,

        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 1  THEN s.close_price - s.open_price END) AS oneUpper ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 1  THEN s.high_price - s.low_price END) AS oneShock ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 2  THEN s.close_price - s.open_price END) AS towUpper ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 2  THEN s.high_price - s.low_price END) AS towShock ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 3  THEN s.close_price - s.open_price END) AS threeUpper ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 3  THEN s.high_price - s.low_price END) AS threeShock ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 4  THEN s.close_price - s.open_price END) AS fourUpper ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 4  THEN s.high_price - s.low_price END) AS fourShock ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 5  THEN s.close_price - s.open_price END) AS fiveUpper ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 5  THEN s.high_price - s.low_price END) AS fiveShock ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 6  THEN s.close_price - s.open_price END) AS sixUpper ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 6  THEN s.high_price - s.low_price END) AS sixShock ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 7  THEN s.close_price - s.open_price END) AS sevenUpper ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 7  THEN s.high_price - s.low_price END) AS sevenShock ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 8  THEN s.close_price - s.open_price END) AS eightUpper ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 8  THEN s.high_price - s.low_price END) AS eightShock ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 9  THEN s.close_price - s.open_price END) AS nineUpper ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 9  THEN s.high_price - s.low_price END) AS nineShock ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 10 THEN s.close_price - s.open_price END) AS tenUpper ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 10 THEN s.high_price - s.low_price END) AS tenShock ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 11 THEN s.close_price - s.open_price END) AS elvenUpper ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 11 THEN s.high_price - s.low_price END) AS elvenShock ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 12 THEN s.close_price - s.open_price END) AS twelveUpper ,
        SUM(CASE WHEN SUBSTR(s.deal_time ,6,2) = 12 THEN s.high_price - s.low_price END) AS twelveShock
        FROM sector_deal_data s
        LEFT JOIN stock_market_class c ON s.sector_code = c.class_code AND c.class_type = '行业板块'
        WHERE s.isvalid = 1
        AND s.deal_period = 3
        <if test="startDay != null and startDay != '' and startDay != 'undefined'">
            AND s.deal_time >= #{startDay}
        </if>
        <if test="endDay != null and endDay != '' and endDay != 'undefined'">
            AND s.deal_time &lt; #{endDay}
        </if>
        GROUP BY s.sector_code
        ) a
        <if test="orderType == '1'.toString()">
            ORDER BY ROUND(a.oneRise/(a.oneRise + a.oneDown)  * 100,2) DESC ,ROUND(a.oneUpper/(a.oneRise + a.oneDown),2) DESC
        </if>
        <if test="orderType == '2'.toString()">
            ORDER BY ROUND(a.towRise/(a.towRise + a.towDown)  * 100,2) DESC ,ROUND(a.towUpper/(a.towRise + a.towDown),2)  DESC
        </if>
        <if test="orderType == '3'.toString()">
            ORDER BY ROUND(a.threeRise/(a.threeRise + a.threeDown)  * 100,2) DESC ,ROUND(a.threeUpper/(a.threeRise + a.threeDown),2)  DESC
        </if>
        <if test="orderType == '4'.toString()">
            ORDER BY ROUND(a.fourRise/(a.fourRise + a.fourDown)  * 100,2) DESC ,ROUND(a.fourUpper/(a.fourRise + a.fourDown),2)  DESC
        </if>
        <if test="orderType == '5'.toString()">
            ORDER BY ROUND(a.fiveRise/(a.fiveRise + a.fiveDown)  * 100,2) DESC ,ROUND(a.fiveUpper/(a.fiveRise + a.fiveDown),2)  DESC
        </if>
        <if test="orderType == '6'.toString()">
            ORDER BY ROUND(a.sixRise/(a.sixRise + a.sixDown)  * 100,2) DESC ,ROUND(a.sixUpper/(a.sixRise + a.sixDown),2)  DESC
        </if>
        <if test="orderType == '7'.toString()">
            ORDER BY ROUND(a.sevenRise/(a.sevenRise + a.sevenDown)  * 100,2) DESC ,ROUND(a.sevenUpper/(a.sevenRise + a.sevenDown),2)  DESC
        </if>
        <if test="orderType == '8'.toString()">
            ORDER BY ROUND(a.eightRise/(a.eightRise + a.eightDown)  * 100,2) DESC ,ROUND(a.eightUpper/(a.eightRise + a.eightDown),2)  DESC
        </if>
        <if test="orderType == '9'.toString()">
            ORDER BY ROUND(a.nineRise/(a.nineRise + a.nineDown)  * 100,2) DESC ,ROUND(a.nineUpper/(a.nineRise + a.nineDown),2)  DESC
        </if>
        <if test="orderType == '10'.toString()">
            ORDER BY ROUND(a.tenRise/(a.tenRise + a.tenDown)  * 100,2) DESC ,ROUND(a.tenUpper/(a.tenRise + a.tenDown),2)  DESC
        </if>
        <if test="orderType == '11'.toString()">
            ORDER BY ROUND(a.elevenRise/(a.elevenRise + a.elevenDown)  * 100,2) DESC ,ROUND(a.elvenUpper/(a.elevenRise + a.elevenDown),2)  DESC
        </if>
        <if test="orderType == '12'.toString()">
            ORDER BY ROUND(a.twelveRise/(a.twelveRise + a.twelveDown)  * 100,2) DESC ,ROUND(a.twelveUpper/(a.twelveRise + a.twelveDown),2)  DESC
        </if>
    </select>

    <select id="getSectorFestivalStaticList" parameterType="java.lang.String" resultType="com.sky.vo.FestivalStatic_VO">
        SELECT
        s.sector_code sectorCode,
        c.class_name sectorName,
        SUM(CASE WHEN s.close_price - s.open_price > 0 THEN 1 ELSE 0 END) AS increaseNum ,
        SUM(CASE WHEN s.close_price - s.open_price &lt; 0 THEN 1 ELSE 0 END) AS decreaseNum ,
        SUM(CASE WHEN s.close_price - s.open_price > 0 THEN 1 ELSE 0 END) +
        SUM(CASE WHEN s.close_price - s.open_price &lt; 0 THEN 1 ELSE 0 END) AS totalNum ,
        ROUND(SUM(CASE WHEN s.close_price - s.open_price > 0 THEN 1 ELSE 0 END) / (
        SUM(CASE WHEN s.close_price - s.open_price > 0 THEN 1 ELSE 0 END) +
        SUM(CASE WHEN s.close_price - s.open_price &lt; 0 THEN 1 ELSE 0 END)
        ) * 100 ,2) AS increaseRate ,
        ROUND(SUM(CASE WHEN s.close_price - s.open_price &lt; 0 THEN 1 ELSE 0 END) / (
        SUM(CASE WHEN s.close_price - s.open_price > 0 THEN 1 ELSE 0 END) +
        SUM(CASE WHEN s.close_price - s.open_price &lt; 0 THEN 1 ELSE 0 END)
        ) * 100 ,2) AS decreaseRate ,
        ROUND(SUM(s.close_price - s.open_price) / SUM(1),2) changeAverage,
        ROUND(SUM(s.high_price - s.low_price) / SUM(1),2) shockAverage ,


        ROUND(IFNULL(
        SUM(CASE WHEN RIGHT(s.deal_time,2) = RIGHT(#{startTime},2) AND s.close_price - s.open_price > 0 THEN 1 ELSE 0 END) /
        SUM(CASE WHEN RIGHT(s.deal_time,2) = RIGHT(#{startTime},2) THEN 1 ELSE 0 END) * 100
        ,0) ,2) firstIncrease ,
        ROUND(IFNULL(
        SUM(CASE WHEN RIGHT(s.deal_time,2) = RIGHT(#{startTime},2) + 1 AND s.close_price - s.open_price > 0 THEN 1 ELSE 0 END) /
        SUM(CASE WHEN RIGHT(s.deal_time,2) = RIGHT(#{startTime},2) + 1 THEN 1 ELSE 0 END) * 100
        ,0) ,2) secondIncrease ,
        ROUND(IFNULL(
        SUM(CASE WHEN RIGHT(s.deal_time,2) = RIGHT(#{startTime},2) + 2 AND s.close_price - s.open_price > 0 THEN 1 ELSE 0 END) /
        SUM(CASE WHEN RIGHT(s.deal_time,2) = RIGHT(#{startTime},2) + 2 THEN 1 ELSE 0 END) * 100
        ,0) ,2) thirdIncrease ,
        ROUND(IFNULL(
        SUM(CASE WHEN RIGHT(s.deal_time,2) = RIGHT(#{startTime},2) + 3 AND s.close_price - s.open_price > 0 THEN 1 ELSE 0 END) /
        SUM(CASE WHEN RIGHT(s.deal_time,2) = RIGHT(#{startTime},2) + 3 THEN 1 ELSE 0 END) * 100
        ,0) ,2) fourthIncrease ,
        ROUND(IFNULL(
        SUM(CASE WHEN RIGHT(s.deal_time,2) = RIGHT(#{startTime},2) + 4 AND s.close_price - s.open_price > 0 THEN 1 ELSE 0 END) /
        SUM(CASE WHEN RIGHT(s.deal_time,2) = RIGHT(#{startTime},2) + 4 THEN 1 ELSE 0 END) * 100
        ,0) ,2) fifthIncrease ,
        ROUND(IFNULL(
        SUM(CASE WHEN RIGHT(s.deal_time,2) = RIGHT(#{startTime},2) + 5 AND s.close_price - s.open_price > 0 THEN 1 ELSE 0 END) /
        SUM(CASE WHEN RIGHT(s.deal_time,2) = RIGHT(#{startTime},2) + 5 THEN 1 ELSE 0 END) * 100
        ,0) ,2) sixthIncrease

        FROM sector_deal_data s
        LEFT JOIN stock_market_class c ON LEFT(c.class_code,LENGTH(c.class_code)-1) = s.sector_code AND c.class_type = '行业板块'
        WHERE s.isvalid = 1
        AND s.deal_period = 1
        <if test="sectorCode != null and sectorCode != '' and sectorCode != 'undefined'">
            AND sector_code = #{sectorCode}
        </if>
        <if test="startDay != null and startDay != '' and startDay != 'undefined'">
            AND deal_time >= #{startDay}
        </if>
        <if test="endDay != null and endDay != '' and endDay != 'undefined'">
            AND deal_time &lt; #{endDay}
        </if>
        AND RIGHT(s.deal_time,5) >= #{startTime}
        AND RIGHT(s.deal_time,5) &lt;= #{endTime}
        GROUP BY s.sector_code
        ORDER BY
        ROUND(SUM(CASE WHEN s.close_price - s.open_price > 0 THEN 1 ELSE 0 END) / (
        SUM(CASE WHEN s.close_price - s.open_price > 0 THEN 1 ELSE 0 END) +
        SUM(CASE WHEN s.close_price - s.open_price &lt; 0 THEN 1 ELSE 0 END)
        ) * 100 ,2) DESC,
        ROUND(SUM(s.close_price - s.open_price) / SUM(1),2) DESC
    </select>

    <select id="getHotSectorStatisticList" parameterType="java.lang.String" resultType="com.sky.vo.HotSectorStaticVO">
        SELECT
        e.sector_code lastCode,
        e.class_name lastName,
        f.sector_code nowCode,
        f.class_name nowName,
        SUM(1) amount
        FROM
        (
            SELECT
            *
            FROM(
                SELECT
                @r:= CASE WHEN @deal_time=a.deal_time THEN @r+1 ELSE 1 END AS rowNum,
                @deal_time:=a.deal_time AS deal_time_1,
                a.*
                FROM
                (
                SELECT
                d.deal_time,
                c.class_code sector_code,
                c.class_name ,
                d.close_price - d.open_price increase
                FROM sector_deal_data d
                LEFT JOIN stock_market_class c ON d.sector_code = LEFT(c.class_code,6)
                WHERE d.deal_period = 1
                <if test="startDay != null and startDay != '' and startDay != 'undefined'">
                    AND d.deal_time >= #{startDay}
                </if>
                <if test="endDay != null and endDay != '' and endDay != 'undefined'">
                    AND d.deal_time &lt; #{endDay}
                </if>
                ORDER BY d.deal_time ASC,(d.close_price - d.open_price) DESC
                ) a
                ,(SELECT @r:=0 ,@deal_time:='') b
                ORDER BY a.deal_time,a.increase DESC
            ) d <where>
                    <if test="orderRegain != null and orderRegain != '' and orderRegain != 'undefined'">
                        AND d.rowNum &lt;= #{orderRegain}
                    </if>
                </where>
        ) e
        LEFT JOIN
        (
            SELECT
            *
            FROM(
                SELECT
                @r:= CASE WHEN @deal_time=a.deal_time THEN @r+1 ELSE 1 END AS rowNum,
                @deal_time:=a.deal_time AS deal_time_1,
                a.*
                FROM
                (
                SELECT
                d.deal_time,
                c.class_code sector_code,
                c.class_name ,
                d.close_price - d.open_price increase
                FROM sector_deal_data d
                LEFT JOIN stock_market_class c ON d.sector_code = LEFT(c.class_code,6)
                WHERE d.deal_period = 1
                <if test="startDay != null and startDay != '' and startDay != 'undefined'">
                    AND d.deal_time >= #{startDay}
                </if>
                <if test="endDay != null and endDay != '' and endDay != 'undefined'">
                    AND d.deal_time &lt; #{endDay}
                </if>
                ORDER BY d.deal_time ASC,(d.close_price - d.open_price) DESC
                ) a
                ,(SELECT @r:=0 ,@deal_time:='') b
                ORDER BY a.deal_time,a.increase DESC
            ) t
                <where>
                    <if test="orderRegain != null and orderRegain != '' and orderRegain != 'undefined'">
                        AND t.rowNum &lt;= #{orderRegain}
                    </if>
                </where>
        ) f ON e.deal_time = DATE_ADD(f.deal_time, INTERVAL -1 DAY)
        <where>
            <if test="sectorCode != null and sectorCode != '' and sectorCode != 'undefined'">
                AND e.sector_code = #{sectorCode}
            </if>
        </where>
        <if test="sectorCodes != null and sectorCodes != '' and sectorCodes != 'undefined'">
            GROUP BY f.sector_code
            HAVING(SUM(1)>= 5)
            ORDER BY SUM(1) DESC
        </if>
        <if test="sectorCodes == null or sectorCodes == '' or sectorCodes == 'undefined'">
            GROUP BY e.sector_code,f.sector_code
            HAVING(SUM(1)>= 5)
            ORDER BY e.sector_code ,SUM(1) DESC
        </if>

    </select>
</mapper>